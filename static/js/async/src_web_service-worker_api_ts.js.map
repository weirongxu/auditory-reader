{"version":3,"file":"static/js/async/src_web_service-worker_api_ts.js","sources":["/home/runner/work/auditory-reader/auditory-reader/src/core/api/books/property.ts","/home/runner/work/auditory-reader/auditory-reader/src/core/api/index.ts","/home/runner/work/auditory-reader/auditory-reader/src/core/route/request.ts","/home/runner/work/auditory-reader/auditory-reader/src/core/route/response.ts","/home/runner/work/auditory-reader/auditory-reader/src/web/service-worker/api.ts","/home/runner/work/auditory-reader/auditory-reader/node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js"],"sourcesContent":["import { bookManager } from '../../book/book-manager.js'\nimport type { BookTypes } from '../../book/types.js'\nimport { URouter } from '../../route/router.js'\nimport type { BookViewQuery } from './view.js'\n\nexport const booksPropertyRouter = new URouter<\n  BookViewQuery,\n  BookTypes.PropertyJson\n>('books/property').routeLogined(async ({ req, userInfo }) => {\n  const body = await req.body\n  const bookEntity = await bookManager.entity(userInfo.account, body.uuid)\n  return bookEntity.readProp()\n})\n","import type { URouter } from '../route/router.js'\nimport { booksAnnotationsDeleteRouter } from './books/annotations-delete.js'\nimport { booksAnnotationsUpsertRouter } from './books/annotations-upsert.js'\nimport { booksAnnotationsRouter } from './books/annotations.js'\nimport { booksCoverRouter } from './books/cover.js'\nimport { booksCreateByUrlRouter } from './books/create-by-url.js'\nimport { booksCreateRouter } from './books/create.js'\nimport { booksDownloadRouter } from './books/download.js'\nimport { booksFetchUrlInfoRouter } from './books/fetch-url-info.js'\nimport { booksMoveAfterRouter } from './books/move-after.js'\nimport { booksMoveTopRouter } from './books/move-top.js'\nimport { booksPageRouter } from './books/page.js'\nimport { booksPositionRouter } from './books/position.js'\nimport { booksPropertyRouter } from './books/property.js'\nimport { booksRemoveRouter } from './books/remove.js'\nimport { booksRenderRouter } from './books/render.js'\nimport { booksSearchRouter } from './books/search.js'\nimport { booksShowRouter } from './books/show.js'\nimport { booksPositionSyncRouter } from './books/position-sync.js'\nimport { booksTmpStoreRouter } from './books/tmp-store.js'\nimport { booksUpdateRouter } from './books/update.js'\nimport { booksViewRouter } from './books/view.js'\nimport { loginRouter } from './login.js'\nimport { logoutRouter } from './logout.js'\nimport { userRouter } from './user.js'\nimport { booksKeywordsRouter } from './books/keywords.js'\nimport { booksKeywordsUpsertRouter } from './books/keywords-upsert.js'\nimport { booksKeywordsDeleteRouter } from './books/keywords-delete.js'\n\nexport const ROUTERS = [\n  loginRouter,\n  logoutRouter,\n  userRouter,\n  booksCreateRouter,\n  booksFetchUrlInfoRouter,\n  booksTmpStoreRouter,\n  booksCreateByUrlRouter,\n  booksMoveAfterRouter,\n  booksMoveTopRouter,\n  booksPageRouter,\n  booksRemoveRouter,\n  booksShowRouter,\n  booksDownloadRouter,\n  booksPositionRouter,\n  booksPositionSyncRouter,\n  booksPropertyRouter,\n  booksAnnotationsRouter,\n  booksAnnotationsUpsertRouter,\n  booksAnnotationsDeleteRouter,\n  booksKeywordsRouter,\n  booksKeywordsUpsertRouter,\n  booksKeywordsDeleteRouter,\n  booksUpdateRouter,\n  booksViewRouter,\n  booksCoverRouter,\n  booksRenderRouter,\n  booksSearchRouter,\n] satisfies URouter[]\n","import type { Request as ExpressRequest } from 'express'\nimport { USession } from './session.js'\n\ntype RequestGetter<Body> = {\n  searchParams: () => URLSearchParams\n  body: () => Promise<Body>\n  url: () => string\n  session: () => USession\n  paths: () => string[]\n}\n\nexport class URequest<Body> {\n  static fromNode<Body>(req: ExpressRequest, dynamicPaths: string[]) {\n    const searchParams = new URLSearchParams()\n    for (const [key, value] of Object.entries(req.query)) {\n      if (typeof value === 'string') searchParams.append(key, value)\n      else if (Array.isArray(value))\n        for (const item of value)\n          if (typeof item === 'string') searchParams.append(key, item)\n    }\n    return new this<Body>({\n      searchParams: () => searchParams,\n      body: () => req.body,\n      url: () => req.url,\n      session: () => USession.fromNode(req.session),\n      paths: () => dynamicPaths,\n    })\n  }\n\n  static fromBrowser<Body>(req: Request, dynamicPaths: string[]) {\n    return new this<Body>({\n      searchParams: () => new URLSearchParams(req.url.split('?')[1]),\n      body: async () => await req.json(),\n      url: () => req.url,\n      session: () => USession.fromBrowser(),\n      paths: () => dynamicPaths,\n    })\n  }\n\n  constructor(protected readonly getter: RequestGetter<Body>) {}\n\n  get searchParams() {\n    return this.getter.searchParams()\n  }\n\n  get body(): Promise<Body> {\n    return this.getter.body()\n  }\n\n  get url() {\n    return this.getter.url()\n  }\n\n  get paths() {\n    return this.getter.paths()\n  }\n\n  get session() {\n    return this.getter.session()\n  }\n}\n","import type { Response as ExResponse } from 'express'\n\ntype ResponseSetter = {\n  header: (name: string, value: string | number) => void\n  status: (code: number) => void\n}\n\nexport class UResponseHold {\n  headers: Record<string, string> = {}\n  status?: number\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport class UResponse<Body> {\n  static fromNode(res: ExResponse) {\n    return new this({\n      header: (name, value) => res.setHeader(name, value),\n      status: (s: number) => res.status(s),\n    })\n  }\n\n  static fromBrowser(res: UResponseHold) {\n    return new this({\n      header: (name, value) => (res.headers[name] = value.toString()),\n      status: (code: number) => (res.status = code),\n    })\n  }\n\n  constructor(protected readonly setter: ResponseSetter) {}\n\n  header(name: string, value: string) {\n    this.setter.header(name, value)\n    return this\n  }\n\n  status(code: number) {\n    this.setter.status(code)\n    return this\n  }\n}\n","/// <reference lib=\"webworker\"/>\n\nimport isPlainObject from 'is-plain-obj'\nimport { ROUTERS } from '../../core/api/index.js'\nimport { getActionPath } from '../../core/route/action.js'\nimport { URequest } from '../../core/route/request.js'\nimport { UResponseHold, UResponse } from '../../core/route/response.js'\nimport { ErrorRequestResponse } from '../../core/route/session.js'\n\nexport default null\ndeclare let self: ServiceWorkerGlobalScope\n\nself.addEventListener('install', (event) => {\n  // eslint-disable-next-line no-console\n  console.log('service-worker: installed')\n  event.waitUntil(self.skipWaiting())\n})\n\nself.addEventListener('activate', (event) => {\n  // eslint-disable-next-line no-console\n  console.log('service-worker: activate event in progress.')\n  event.waitUntil(self.clients.claim())\n})\n\nself.addEventListener('fetch', (event) => {\n  const req = event.request\n  const url = new URL(req.url)\n\n  if (\n    url.hostname !== location.hostname ||\n    !url.pathname.startsWith(getActionPath(''))\n  )\n    return\n  const router = ROUTERS.find((r) =>\n    r.isMatch({ method: req.method, pathname: url.pathname }),\n  )\n\n  if (router?.handler) {\n    const resH = new UResponseHold()\n    event.respondWith(\n      Promise.resolve(\n        router.handler({\n          req: URequest.fromBrowser<any>(\n            req,\n            router.getDynamicPaths(url.pathname),\n          ),\n          res: UResponse.fromBrowser(resH),\n        }),\n      )\n        .then((body: any) => {\n          const data = isPlainObject(body) ? JSON.stringify(body) : body\n          return new Response(data, {\n            status: resH.status ?? 200,\n            headers: resH.headers,\n          })\n        })\n        .catch((error) => {\n          if (error instanceof ErrorRequestResponse) {\n            return new Response(JSON.stringify({ message: error.message }), {\n              status: 400,\n              headers: resH.headers,\n            })\n          } else {\n            const msg =\n              error instanceof Error ? error.message : error?.toString()\n            console.error(error)\n            return new Response(JSON.stringify({ message: msg }), {\n              status: 500,\n              headers: resH.headers,\n            })\n          }\n        }),\n    )\n  }\n})\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AApBA;;AAAA;AAAA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;ACrDA;;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;;AAAA;AAAA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}